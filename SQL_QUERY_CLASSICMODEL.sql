-- CLASSIC_MODELS DATA ANALYSIS.
-- WE WILL LOOK INTO SOME INTERESTING INSIGHTS 
USE CLASSICMODELS;
                        
                        

                        ---- CUSTOMER ANALYSIS ----
-- TOTAL NUMBER OF CUSTOMERS FROM EACH COUNTRY OF GIVEN DATASET --
SELECT  COUNTRY,COUNT(CUSTOMERNUMBER) AS TOTAL_CUSTOMER  FROM CUSTOMERS
GROUP BY COUNTRY WITH ROLLUP
ORDER BY TOTAL_CUSTOMER DESC;

-- AVERAGE CREDIT LIMIT
SELECT  CAST(AVG(CREDITLIMIT) AS DECIMAL(8,3)) AS AVG_CREDIT_LIMIT FROM CUSTOMERS; 

-- TOTAL CREDIT LIMIT OF CUSTOMER GIVEN COUNTRIES
SELECT COUNTRY, SUM(CREDITLIMIT)  FROM CUSTOMERS
GROUP BY COUNTRY;

-- TOP 5 CUSTOMER WITH HIGHEST CREDIT LIMIT
SELECT CUSTOMERNUMBER, CUSTOMERNAME, CONCAT(CONTACTFIRSTNAME," ",CONTACTLASTNAME) AS CONTACT_NAME,  CREDITLIMIT FROM CUSTOMERS 
ORDER BY CREDITLIMIT DESC
LIMIT 5;

-- CUSTOMERS WITH CREDIT LIMIT HIGHER THAN AVERAGE CREDIT LIMIT
SELECT CUSTOMERNUMBER, CUSTOMERNAME, CONCAT(CONTACTFIRSTNAME," ",CONTACTLASTNAME) AS CONTACT_NAME, CREDITLIMIT FROM CUSTOMERS
WHERE CREDITLIMIT> (SELECT AVG(CREDITLIMIT) FROM CUSTOMERS)
ORDER BY CREDITLIMIT DESC;





                         ---- EMPLOYEES ANALYSIS ----
-- NUMBER OF EMPLOYEES FOR RESPECTIVE JOB PROFILE
SELECT JOBTITLE, COUNT(EMPLOYEENUMBER) AS TOTAL_EMPLOYEES FROM EMPLOYEES
GROUP BY JOBTITLE
ORDER BY TOTAL_EMPLOYEES DESC;


-- NAME OF EMPLOYEES AND REPORTING MANAGER--- 
SELECT EMPLOYEES.EMPLOYEENUMBER, EMPLOYEES.REPORTSTO , CONCAT(EMPLOYEES.FIRSTNAME,' ',EMPLOYEES.LASTNAME) AS EMPLOYEE_NAME,
CONCAT(MANAGER.FIRSTNAME,' ',MANAGER.LASTNAME) AS MANAGER_NAME
FROM EMPLOYEES 
LEFT JOIN EMPLOYEES AS MANAGER
ON MANAGER.EMPLOYEENUMBER=EMPLOYEES.REPORTSTO;


-- NUMBER OF EMPLOYEES WORKING IN RESPECTIVE OFFICES Across CITY AND COUNTRY
SELECT OFFICES.OFFICECODE, CITY, COUNTRY,  COUNT(EMPLOYEENUMBER) AS TOTAL_EMPLOYEES FROM EMPLOYEES
JOIN OFFICES ON EMPLOYEES.OFFICECODE=OFFICES.OFFICECODE
GROUP BY OFFICES.OFFICECODE
ORDER BY TOTAL_EMPLOYEES DESC;




						---- CUSTOMERS AND ORDERS ANALYSIS ----
-- TOTAL PRICE OF EACH ORDER 
SELECT ORDERNUMBER , SUM(QUANTITYORDERED * PRICEEACH) AS TOTAL_PRICE FROM ORDERDETAILS
GROUP BY ORDERNUMBER 
ORDER BY TOTAL_PRICE DESC;


-- TOP 5 ORDER SALES AND CUSTOMER 
SELECT OD.ORDERNUMBER , CUSTOMERNAME, SUM(QUANTITYORDERED * PRICEEACH) AS TOTAL_PRICE 
FROM ORDERDETAILS OD
JOIN ORDERS O ON OD.ORDERNUMBER= O.ORDERNUMBER
JOIN CUSTOMERS C ON O.CUSTOMERNUMBER= C.CUSTOMERNUMBER
GROUP BY OD.ORDERNUMBER , CUSTOMERNAME
ORDER BY TOTAL_PRICE DESC
LIMIT 5 ;


 
-- PRODUCT  WITH HIGHEST TOTAL PRICE   
SELECT PRODUCTCODE, SUM(QUANTITYORDERED * PRICEEACH) AS TOTAL_PRICE_OF_PRODUCT FROM ORDERDETAILS
GROUP BY PRODUCTCODE
ORDER BY TOTAL_PRICE_OF_PRODUCT DESC
LIMIT 5;


-- TOP 5 EXPENSIVE PRODUCT 
SELECT PRODUCTCODE, MAX(PRICEEACH) AS PRICE_OF_PRODUCT FROM ORDERDETAILS 
GROUP BY PRODUCTCODE
ORDER BY PRICE_OF_PRODUCT DESC
LIMIT 5;
 

-- QUANTITY OF MOST ORDERDED PRODUCTS
SELECT PRODUCTCODE,SUM(QUANTITYORDERED) AS PRODUCT_QUANTITY FROM ORDERDETAILS
GROUP BY PRODUCTCODE
ORDER BY PRODUCT_QUANTITY DESC
LIMIT 5; 


-- TOTAL COUNT OF ORDERS IN LINE
SELECT ORDERNUMBER,COUNT(*) AS ITEM_IN_LINE FROM ORDERDETAILS
GROUP BY ORDERNUMBER
ORDER BY ITEM_IN_LINE DESC;

-- IDENTITY NUMBER OF ORDERS AND STATUS OF RESPECTIVE ORDERS
SELECT STATUS , COUNT(*) AS NUMBER_OF_ORDERS FROM ORDERS
GROUP BY STATUS; 


-- IDENTITY NUMBER OF DAYS BETWEEN ORDER BOOKING AND SHIPMENT RECIEVING
-- SIMILARLY, WE CHECK FOR EACH UNIQUE STATUS 
SELECT ORDERNUMBER, ORDERDATE,SHIPPEDDATE,STATUS, 
DATEDIFF(SHIPPEDDATE, ORDERDATE) AS NUMBER_OF_DAYS  FROM ORDERS
WHERE ORDERDATE IS NOT NULL AND SHIPPEDDATE IS NOT NULL AND STATUS='SHIPPED';




-- FEEDBACK GIVEN BY CUSTOMER FOR REPECTIVE ORDER DELIVERY
SELECT ORDERNUMBER,CUSTOMERNUMBER, STATUS,COMMENTS FROM ORDERS
WHERE COMMENTS IS NOT NULL;


-- TOP 5 CUSTOMERS WITH MOST NUMBER OF ORDERS
SELECT O.CUSTOMERNUMBER ,CUSTOMERNAME, COUNT(ORDERNUMBER) AS NUMBER_OF_ORDERS 
FROM ORDERS O
JOIN CUSTOMERS C ON O.CUSTOMERNUMBER=C.CUSTOMERNUMBER
GROUP BY CUSTOMERNUMBER,CUSTOMERNAME
ORDER BY NUMBER_OF_ORDERS DESC
LIMIT 5;


-- IDENTITY WHICH SHIPPMENT IS RECIVED BEFORE OR AFTER REQUIRED DATE AND IT'S STATUS
-- FOR SAME QUERY WE CAN CHANGE (WHERE='on_time') ALSO 
WITH DELIVERY AS (
SELECT ORDERNUMBER,CUSTOMERNUMBER,STATUS , CASE WHEN SHIPPEDDATE < REQUIREDDATE THEN 'on_time' ELSE 'delayed'
END  AS DELIVERY_CONDITION FROM ORDERS
WHERE SHIPPEDDATE IS NOT NULL AND REQUIREDDATE IS NOT NULL)

SELECT * FROM DELIVERY
WHERE DELIVERY_CONDITION='On_time';




					---- PAYMENTS AND CUSTOMER ANALYSIS ----
-- CHECKING NUMBER OF CHEQUES PROVIDED BY EACH CUSTOMER
SELECT CUSTOMERNUMBER, COUNT(CHECKNUMBER) NUMBER_OF_CHCEK FROM PAYMENTS
GROUP BY CUSTOMERNUMBER
ORDER BY NUMBER_OF_CHCEK DESC; 


-- IDENTITY DISTINCT YEAR-MONTH OF PAYMENT DATE AND NUMBER PAYMENT RECIEVED
SELECT DISTINCT DATE_FORMAT(PAYMENTDATE, '%Y-%M') AS YEAR_MONTH_COLUMN, COUNT(CHECKNUMBER) 
AS NUMBER_OF_PAYMENT FROM PAYMENTS
GROUP BY YEAR_MONTH_COLUMN
ORDER BY YEAR_MONTH_COLUMN DESC;


-- TOP 10 CUSTOMER WITH HIGHEST PAID AMOUNT  
SELECT CUSTOMERS.CUSTOMERNUMBER , CUSTOMERNAME, CONCAT(CONTACTFIRSTNAME," ",CONTACTLASTNAME) AS CONTACT_NAME,
CITY,SUM(AMOUNT) AS TOTAL_AMOUNT FROM PAYMENTS 
JOIN  CUSTOMERS
ON CUSTOMERS.CUSTOMERNUMBER= PAYMENTS.CUSTOMERNUMBER
GROUP BY CUSTOMERS.CUSTOMERNUMBER 
ORDER BY TOTAL_AMOUNT DESC
LIMIT 10;


-- AVERAGE AMOUNT PAID BY EACH CUSTOMER 
SELECT CUSTOMERNUMBER, AVG(AMOUNT) AS AVERAGE_PAYMENT FROM PAYMENTS 
GROUP BY CUSTOMERNUMBER 
ORDER BY AVERAGE_PAYMENT DESC;


-- MAXIMUM AND AVERAGE PAYMENT AMOUNT RECIEVED  
SELECT  MAX(AMOUNT) AS MAXIMUM_AMOUNT, AVG(AMOUNT) AS AVERAGE_AMOUNT FROM PAYMENTS;




					   ---- PRODUCT ANALYSIS ----
-- AVERAGE BUYING AND RETAIL PRICE OF EACH PRODUCTLINE
SELECT PRODUCTLINE,AVG(BUYPRICE), AVG(MSRP) FROM PRODUCTS
GROUP BY PRODUCTLINE
ORDER BY AVG(BUYPRICE) DESC;


-- MOST EXPENSIVE PRODUCT FOR RETAILER/WHOLESALER
SELECT PRODUCTCODE,PRODUCTNAME,PRODUCTLINE,
PRODUCTVENDOR,QUANTITYINSTOCK,BUYPRICE FROM PRODUCTS
WHERE BUYPRICE>100
ORDER BY BUYPRICE DESC;


-- IDENTITFY IF ANY PRODUCT PURCAHSING PRICE IS HIGHER THAN SUGGESTED RETAIL PRICE
SELECT * FROM PRODUCTS
WHERE BUYPRICE>MSRP;


-- PRODUCTS WHERE QUANTITY IS LESSER THAN AVERAGE QUANTITY IRRESPECTIVE OF VENDOR 
SELECT * FROM PRODUCTS
WHERE QUANTITYINSTOCK < (SELECT AVG(QUANTITYINSTOCK) FROM PRODUCTS)
ORDER BY QUANTITYINSTOCK;



-- NUMBER OF DIFFERENT PRODUCT OF EACH PRODUCTLINE 
SELECT PRODUCTLINE, COUNT(PRODUCTNAME) AS NUMBER_OF_PRODUCT  FROM PRODUCTS
GROUP BY PRODUCTLINE
ORDER BY NUMBER_OF_PRODUCT DESC;


-- IDENTIFY VENDORS ASSOCIATION TO NUMBER OF PRODUCT_LINE
SELECT PRODUCTVENDOR, PRODUCTLINE ,COUNT(*) AS TOTAL FROM PRODUCTS
GROUP BY PRODUCTVENDOR, PRODUCTLINE
ORDER BY PRODUCTVENDOR, PRODUCTLINE;



-- IDENTITY SALE REPRESENTATIVE EMPLOYEES NAME AND NUMBER OF TIME HE/SHE REPRESENTED TO CUSTOMER
SELECT SALESREPEMPLOYEENUMBER AS SALES_REPRESENTATIVE, 
CONCAT(FIRSTNAME,' ',LASTNAME) AS EMPLOYEES_NAME, JOBTITLE,
COUNT(*) AS NUMBER_OF_DEALING  FROM CUSTOMERS 
JOIN EMPLOYEES
ON EMPLOYEES.EMPLOYEENUMBER= CUSTOMERS.SALESREPEMPLOYEENUMBER
WHERE SALESREPEMPLOYEENUMBER IS NOT NULL
GROUP BY SALESREPEMPLOYEENUMBER
ORDER BY COUNT(*) DESC;




                      ---- SALES REPRESENTATIVE ANALYSIS----
-- TOTAL AMOUNT OF PURCHASES OF ORDER OF CUSTOMERS AND SALES REPRESENTATIVE ASSIGN TO RESPECTIVE CUSTOMER
-- IN ORDER TO IDENTIFY WHAT AMOUNT COLLECTED BY ASSIGNED SALES REP REMOVE (CUSTOMERNAME FROM SELECT AND GROUP BY COMMAND)
WITH PERFORMANCE_ASSOCIATION AS(
SELECT E.EMPLOYEENUMBER,CUSTOMERNAME, CONCAT(E.FIRSTNAME,' ',E.LASTNAME) AS EMPLOYEES_NAME,JOBTITLE,
COUNT(OD.ORDERNUMBER) AS NUMBER_OF_ORDERS, SUM(OD.QUANTITYORDERED * OD.PRICEEACH) AS TOTAL_AMOUNT
FROM EMPLOYEES E
LEFT JOIN CUSTOMERS C ON E.EMPLOYEENUMBER=C.SALESREPEMPLOYEENUMBER
LEFT JOIN ORDERS O ON O.CUSTOMERNUMBER = C.CUSTOMERNUMBER
LEFT JOIN ORDERDETAILS OD ON OD.ORDERNUMBER= O.ORDERNUMBER
WHERE JOBTITLE REGEXP 'SALES REP' AND CUSTOMERNAME IS NOT NULL
GROUP BY E.EMPLOYEENUMBER, EMPLOYEES_NAME,CUSTOMERNAME
ORDER BY TOTAL_AMOUNT DESC)

SELECT * FROM PERFORMANCE_ASSOCIATION;




                          ---- TIME TREND AND PROFIT MARGIN ANALYSIS ----
-- CALCULATE PROFIT MARGIN OF EACH PURCHASED PRODUCT ON MANUFACTURED RETAIL PRICE
SELECT PRODUCTCODE, PRODUCTNAME, PRODUCTLINE, QUANTITYINSTOCK, BUYPRICE,
CONCAT(ROUND(((MSRP-BUYPRICE)/MSRP) *100,2),'%') AS PROFIT FROM PRODUCTS
ORDER BY PROFIT DESC;



-- ESTIMATE AVERAGE PROFIT MARGIN OF RETAILER/WHOLESALER ON ORDER OF EACH PRODUCT AND BUY PRICE
WITH AVERAGE_PROFIT_ESTIMATES AS (

SELECT PRODUCTS.PRODUCTCODE, PRODUCTNAME, PRODUCTLINE,BUYPRICE,PRICEEACH,ROUND(AVG(PRICEEACH),2)
AS AVG_PROD_PRICE, CONCAT(ROUND(((AVG(PRICEEACH-BUYPRICE))/AVG(PRICEEACH)) *100,2),'%') AS PROFIT_OF_SELLER
FROM PRODUCTS 
JOIN ORDERDETAILS ON PRODUCTS.PRODUCTCODE= ORDERDETAILS.PRODUCTCODE
GROUP BY PRODUCTS.PRODUCTCODE, PRODUCTNAME, PRODUCTLINE, BUYPRICE,PRICEEACH
ORDER BY PROFIT_OF_SELLER DESC),

AVERAGE_PRICE AS (

SELECT OD.PRODUCTCODE, PRODUCTNAME,avg(PRICEEACH) FROM ORDERDETAILS OD
JOIN PRODUCTS P ON P.PRODUCTCODE= OD.PRODUCTCODE
GROUP BY OD.PRODUCTCODE,PRODUCTNAME)

SELECT * FROM AVERAGE_PROFIT_ESTIMATES;



-- INDETIFY YEAR AND MONTH EFFECT OF SELLING PRICE OF PRODUCT AND COUNT OF ORDER  
SELECT DATE_FORMAT(ORDERDATE ,'%Y-%M') AS YEAR_MONTH_COLUMN, 
AVG(PRICEEACH) AS AVERAGE, COUNT(ORDERDETAILS.ORDERNUMBER) AS NUMBER_OF_ORDERS FROM ORDERDETAILS 
JOIN ORDERS ON ORDERDETAILS.ORDERNUMBER= ORDERS.ORDERNUMBER
GROUP BY YEAR_MONTH_COLUMN
ORDER BY NUMBER_OF_ORDERS DESC;


-- INDETIFY MONTH EFFECT OF AVERAGE SELLING PRICE OF PRODUCT AND COUNT OF ORDER IN RESPECTIVE MONTHS  
SELECT DATE_FORMAT(ORDERDATE ,'%M') AS MONTH_COLUMN, 
AVG(PRICEEACH) AS AVERAGE,COUNT(ORDERDETAILS.ORDERNUMBER) AS NUMBER_OF_ORDERS FROM ORDERDETAILS 
JOIN ORDERS ON ORDERDETAILS.ORDERNUMBER= ORDERS.ORDERNUMBER
GROUP BY MONTH_COLUMN
ORDER BY NUMBER_OF_ORDERS DESC;



-- INDETIFY MONTH EFFECT OF SALES OF PRODUCT AND COUNT OF ORDER IN RESPECTIVE MONTHS  
SELECT DATE_FORMAT(ORDERDATE ,'%M') AS MONTH_COLUMN, 
SUM(QUANTITYORDERED*PRICEEACH) AS SALES,COUNT(ORDERDETAILS.ORDERNUMBER) AS NUMBER_OF_ORDERS FROM ORDERDETAILS 
JOIN ORDERS ON ORDERDETAILS.ORDERNUMBER= ORDERS.ORDERNUMBER
GROUP BY MONTH_COLUMN
ORDER BY NUMBER_OF_ORDERS DESC;

































































































































































































































































































